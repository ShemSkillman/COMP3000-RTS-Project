using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using System.Linq;

using RTSEngine.UI;

/* ResourceGenerator script created by Oussama Bouanani, SoumiDelRio.
 * This script is part of the Unity RTS Engine */

namespace RTSEngine.EntityComponent
{
    /// <summary>
    /// Allows a FactionEntity instance (can be a unit or a building) to generate resources.
    /// </summary>
    [System.Serializable, RequireComponent(typeof(FactionEntity))]
    public class ResourceGenerator : MonoBehaviour, IEntityComponent
    {
        #region Class Properties
        //the FactionEntity instance to which this component is attached to.
        private FactionEntity factionEntity = null;
        /// <summary>
        /// Entity instance that this component is attached to.
        /// </summary>
        public Entity Entity { get { return factionEntity; } }

        [SerializeField, Tooltip("Is the component active by default?")]
        private bool isActive = true; //is this generator active or not?
        /// <summary>
        /// Is the task component currently active?
        /// </summary>
        public bool IsActive
        {
            get { return isActive; }
            set { isActive = value; }
        }

        //resources that will be generated by this component every X seconds (X in this case is the period's length from the 'period' integer variable in seconds)
        [SerializeField, Tooltip("Resources to generate every period."), Space(10)]
        private ResourceInput[] resources = new ResourceInput[0];

        [SerializeField, Tooltip("Duration (in seconds) required to generate the above resources.")]
        private float period = 1.0f;
        private float timer; //the period's timer

        //holds the amount of the currently generated resources.
        private int[] generatedResources = new int[0];

        [SerializeField, Tooltip("Required resources to generate the above resources during each period.")]
        private ResourceInput[] requiredResources = new ResourceInput[0];

        //if a resource type is inclued in "resources" but not here then it will be assumed that it does not require to reach a threshold.
        [SerializeField, Tooltip("Threshold of generated resources required to achieve so that the resources are collectable by the player.")]
        private ResourceInput[] collectionThreshold = new ResourceInput[0];
        private Dictionary<string, int> collectionThresholdDic = new Dictionary<string, int>(); //for direct access to the resources threshold.

        //have the generated resources hit the target threshold?
        private bool isThresholdMet = false;
        [SerializeField, Tooltip("Automatically add resources to the player's faction when the threshold is met?")]
        private bool autoCollect = false;
        [SerializeField, Tooltip("Stop generating resources when the target threshold is met?")]
        private bool stopGeneratingOnThresholdMet = false;

        [SerializeField, Tooltip("What audio clip to play when the player collects resources produced by this generator?"), Space(10)]
        private AudioClipFetcher collectionAudio = new AudioClipFetcher(); //played when the player collects the resources produced by this generator.

        [SerializeField, Tooltip("Information used to display the resource collection task in case it is manaully collected by the player.")]
        private EntityComponentTaskUIData collectionTaskUI = null;

        //other components
        GameManager gameMgr;
        #endregion

        #region Events
        /// <summary>
        /// Delegate used for the resource generator events.
        /// </summary>
        /// <param name="resourceGenerator">ResourceGenerator instance that triggered the event.</param>
        public delegate void ResourceGeneratorEventHandler(ResourceGenerator resourceGenerator);

        /// <summary>
        /// Event triggered when the resource generator hits their collection threshold.
        /// </summary>
        public static event ResourceGeneratorEventHandler ResourceGeneratorThresholdMet = delegate { };

        /// <summary>
        /// Event triggered when the resource generator's generated resources are collected.
        /// </summary>
        public static event ResourceGeneratorEventHandler ResourceGeneratorCollected = delegate { };

        [SerializeField, Tooltip("Event triggered when the resource generator hits their collection threshold."), Space(10)]
        private UnityEvent onThresholdMet = new UnityEvent();

        [SerializeField, Tooltip("Event triggered when the resource generator's generated resources are collected.")]
        private UnityEvent onCollected = new UnityEvent();
        #endregion

        #region Initialization/Termination
        /// <summary>
        /// Initializer method required for each entity component that gets called by the Entity instance that the component is attached to.
        /// </summary>
        /// <param name="gameMgr">Active instance of the GameManager component.</param>
        /// <param name="entity">Entity instance that the component is attached to.</param>
        public void Init(GameManager gameMgr, Entity entity)
        {
            this.gameMgr = gameMgr;
            this.factionEntity = entity as FactionEntity;

            //initial settings:
            timer = period;

            //assign an empty list of the generated resources
            generatedResources = new int[resources.Length];

            collectionThresholdDic.Clear();
            //populate the collection threshold dictionary for easier direct access later when collecting resources
            foreach (ResourceInput ri in collectionThreshold)
                collectionThresholdDic.Add(ri.Name, ri.Amount);

            //by default, the generated resources haven't achieved the target threshold
            isThresholdMet = false;

            //in case this is a multiplayer game and this component is attached to an entity that does not belong to the local player
            if(GameManager.MultiplayerGame && !RTSHelper.IsLocalPlayer(this.factionEntity)
                || this.factionEntity.IsFree()) //or this is a free unit or building
            {
                enabled = false;
                isActive = false;
                return; //deactivate component
            }
        }
        #endregion

        #region Resource Generation
        /// <summary>
        /// Updates the generated resources.
        /// </summary>
        private void Update()
        {
            if (!factionEntity.CanRunComponents //make sure the associated faction entity can run this component
                || !isActive //if this generator is not active
                || (stopGeneratingOnThresholdMet && isThresholdMet)) //or the we hit the required threshold and we're not allowed to generate more beyond that.
                return;

            //generating resources:
            if (timer > 0) //timer
                timer -= Time.deltaTime;
            else //timer is done
                GeneratePeriodResources(); //generate resources for a period of time.
        }

        /// <summary>
        /// Generates the resources for one period.
        /// </summary>
        private void GeneratePeriodResources()
        {
            if (!gameMgr.ResourceMgr.HasRequiredResources(requiredResources, factionEntity.FactionID))
                return;

            //assume that the target threshold is met:
            isThresholdMet = true;

            for (int i = 0; i < generatedResources.Length; i++)
            {
                generatedResources[i] += resources[i].Amount;

                //one of the resources haven't met the threshold yet? => threshold not met
                if (isThresholdMet
                    && collectionThresholdDic.TryGetValue(resources[i].Name, out int thresholdValue)
                    && generatedResources[i] < thresholdValue)
                    isThresholdMet = false;
            }

            //if the threshold is met and we can either autocollect the resources or this is a NPC faction:
            if (isThresholdMet && (autoCollect || gameMgr.GetFaction(factionEntity.FactionID).IsNPCFaction()))
                CollectResources(false);

            //if the threshold is still achieved:
            if (isThresholdMet)
            {
                ResourceGeneratorThresholdMet(this); //trigger event
                onThresholdMet.Invoke();

                if (collectionTaskUI != null && collectionTaskUI.Data.enabled
                    && RTSHelper.IsPlayerFaction(factionEntity)) //if resources haven't been collected and this is the player's faction
                    CustomEvents.OnEntityComponentTaskReloadRequest(this, collectionTaskUI.Data.code);
            }
                
            //consume the required resources per period:
            gameMgr.ResourceMgr.UpdateResource(factionEntity.FactionID, requiredResources, false);

            timer = period; //reload timer
        }
        #endregion

        #region Resource Collection
        /// <summary>
        /// Collects all the generated resources.
        /// </summary>
        /// <param name="playerCommand">True if the player clicked on the resource collection task, otherwise false.</param>
        private void CollectResources(bool playerCommand)
        {
            isThresholdMet = false; //we no longer meet the threshold.

            for (int i = 0; i < generatedResources.Length; i++)
            {
                //add the collected resources
                gameMgr.ResourceMgr.UpdateResource(factionEntity.FactionID, resources[i].Name, generatedResources[i], true);
                generatedResources[i] = 0; //and reset them.
            }

            ResourceGeneratorCollected(this); //trigger event.
            onCollected.Invoke();

            if(playerCommand)
                gameMgr.AudioMgr.PlaySFX(collectionAudio.Fetch(), false); //play the collection audio
        }
        #endregion

        #region Task UI
        /// <summary>
        /// Allows to provide information regarding the resource collection task, if there's one, that is displayed in the task panel when the resource generator is selected.
        /// </summary>
        /// <param name="taskUIAttributes">TaskUIAttributes instance that contains the information required to display the resource collection task.</param>
        /// <param name="disabledTaskCodes">In case the resource generation task is to be disabeld, it will be the single element of this IEnumerable.</param>
        /// <returns>True if there's a resource collection task that requires to be displayed, otherwise false.</returns>
        public bool OnTaskUIRequest(out IEnumerable<TaskUIAttributes> taskUIAttributes, out IEnumerable<string> disabledTaskCodes)
        {
            taskUIAttributes = null;
            disabledTaskCodes = null;

            if (collectionTaskUI == null) //task is not assigned
                return false;

            disabledTaskCodes = Enumerable.Repeat(collectionTaskUI.Data.code, 1);

            if(!factionEntity.CanRunComponents //if the associated faction entity can not run this component
                || !isActive //if the generator is not active
                || !RTSHelper.IsPlayerFaction(factionEntity) //or this is not the local player's faction
                || autoCollect //or collection is automatic 
                || !isThresholdMet //or the collection threshold is not met yet 
                || !collectionTaskUI.Data.enabled) //or the task is not enabled
                return false; //no task to display

            //set the resource collection task.
            taskUIAttributes = Enumerable.Repeat(
                new TaskUIAttributes()
                {
                    entityComp = collectionTaskUI.Data,
                    icon = collectionTaskUI.Data.icon
                },
                1);

            disabledTaskCodes = null; //no task to disable

            return true;
        }

        /// <summary>
        /// Called when the player clicks on the resource collection task by the TaskUI instance that handles that task.
        /// </summary>
        /// <param name="taskCode">Code of the resource collection task. In other more complex components, multiple tasks can be drawn from the same component, this allows to define which task has been clicked.</param>
        public void OnTaskUIClick(string taskCode)
        {
            CollectResources(true);
        }
        #endregion
    }
}
